// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("deposited", Value.fromBigInt(BigInt.zero()));
    this.set("depositedBlock", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get deposited(): BigInt {
    let value = this.get("deposited");
    return value!.toBigInt();
  }

  set deposited(value: BigInt) {
    this.set("deposited", Value.fromBigInt(value));
  }

  get depositedBlock(): BigInt {
    let value = this.get("depositedBlock");
    return value!.toBigInt();
  }

  set depositedBlock(value: BigInt) {
    this.set("depositedBlock", Value.fromBigInt(value));
  }
}

export class Balance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("balance", Value.fromStringArray(new Array(0)));
    this.set("numOfTransfer", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Balance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Balance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Balance", id.toString(), this);
    }
  }

  static load(id: string): Balance | null {
    return changetype<Balance | null>(store.get("Balance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get balance(): Array<string> {
    let value = this.get("balance");
    return value!.toStringArray();
  }

  set balance(value: Array<string>) {
    this.set("balance", Value.fromStringArray(value));
  }

  get numOfTransfer(): BigInt {
    let value = this.get("numOfTransfer");
    return value!.toBigInt();
  }

  set numOfTransfer(value: BigInt) {
    this.set("numOfTransfer", Value.fromBigInt(value));
  }
}

export class BlockBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("balance", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BlockBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BlockBalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BlockBalance", id.toString(), this);
    }
  }

  static load(id: string): BlockBalance | null {
    return changetype<BlockBalance | null>(store.get("BlockBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }
}

export class TokenStatus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenSupply", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenStatus entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenStatus must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenStatus", id.toString(), this);
    }
  }

  static load(id: string): TokenStatus | null {
    return changetype<TokenStatus | null>(store.get("TokenStatus", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenSupply(): BigInt {
    let value = this.get("tokenSupply");
    return value!.toBigInt();
  }

  set tokenSupply(value: BigInt) {
    this.set("tokenSupply", Value.fromBigInt(value));
  }
}

export class DelegationAddress extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("addresses", Value.fromBytesArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DelegationAddress entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DelegationAddress must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DelegationAddress", id.toString(), this);
    }
  }

  static load(id: string): DelegationAddress | null {
    return changetype<DelegationAddress | null>(
      store.get("DelegationAddress", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get addresses(): Array<Bytes> {
    let value = this.get("addresses");
    return value!.toBytesArray();
  }

  set addresses(value: Array<Bytes>) {
    this.set("addresses", Value.fromBytesArray(value));
  }
}

export class StakingBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolTotalShares", Value.fromStringArray(new Array(0)));
    this.set("poolTotalTokens", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakingBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StakingBalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("StakingBalance", id.toString(), this);
    }
  }

  static load(id: string): StakingBalance | null {
    return changetype<StakingBalance | null>(store.get("StakingBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolTotalShares(): Array<string> {
    let value = this.get("poolTotalShares");
    return value!.toStringArray();
  }

  set poolTotalShares(value: Array<string>) {
    this.set("poolTotalShares", Value.fromStringArray(value));
  }

  get poolTotalTokens(): Array<string> {
    let value = this.get("poolTotalTokens");
    return value!.toStringArray();
  }

  set poolTotalTokens(value: Array<string>) {
    this.set("poolTotalTokens", Value.fromStringArray(value));
  }
}
